name: Deploy to Azure Container Instances

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}
  IMAGE_NAME: learnings-api

jobs:
  # ==========================================
  # JOB 1: Build and Push Docker Image
  # ==========================================
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Login to ACR
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
          ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # ==========================================
  # JOB 2: Deploy to Staging (Automatic)
  # ==========================================
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Delete existing Staging container
      run: |
        echo "üóëÔ∏è Deleting old staging container..."
        az container delete \
          --name ${{ secrets.STAGING_CONTAINER_NAME }} \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --yes || echo "Container doesn't exist, skipping delete"
    
    - name: Deploy to Staging with Environment Variables
      run: |
        echo "üöÄ Deploying to Staging..."
        az container create \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --name ${{ secrets.STAGING_CONTAINER_NAME }} \
          --image ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --registry-login-server ${{ secrets.REGISTRY_LOGIN_SERVER }} \
          --registry-username ${{ secrets.REGISTRY_USERNAME }} \
          --registry-password ${{ secrets.REGISTRY_PASSWORD }} \
          --os-type Linux \
          --environment-variables \
            'AzureStorage__ConnectionString'='${{ secrets.AZURE_STORAGE_CONNECTION_STRING_STAGING }}' \
            'AzureStorage__ContainerName'='${{ secrets.AZURE_STORAGE_CONTAINER_NAME_STAGING }}' \
            'ASPNETCORE_ENVIRONMENT'='Staging' \
            'Logging__LogLevel__Default'='Information' \
          --dns-name-label learnings-api-staging \
          --ports 8080 \
          --cpu 1 \
          --memory 1.5 \
          --restart-policy Always
        echo "‚úÖ Staging deployment initiated!"
    
    - name: Wait for container to be ready
      run: |
        echo "‚è≥ Waiting for container to start..."
        sleep 30
    
    - name: Check container logs
      run: |
        echo "üìã Checking container logs..."
        az container logs \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --name ${{ secrets.STAGING_CONTAINER_NAME }} \
          --tail 50
    
    - name: Verify deployment health
      run: |
        echo "üè• Checking deployment health..."
        FQDN=$(az container show \
          --name ${{ secrets.STAGING_CONTAINER_NAME }} \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --query 'ipAddress.fqdn' -o tsv)
        
        echo "Testing URL: http://${FQDN}:8080/swagger"
        
        # Try health check endpoint
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${FQDN}:8080/swagger || echo "000")
        
        if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "302" ]; then
          echo "‚úÖ Staging is healthy! (HTTP $HTTP_CODE)"
          echo "üåê Access at: http://${FQDN}:8080/swagger"
        else
          echo "‚ö†Ô∏è Warning: Staging returned HTTP $HTTP_CODE"
          echo "üìã Recent logs:"
          az container logs \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name ${{ secrets.STAGING_CONTAINER_NAME }} \
            --tail 30
          exit 1
        fi
    
    - name: Azure Logout
      run: az logout
      if: always()

  # ==========================================
  # JOB 3: Deploy to Production (Manual Approval Required)
  # ==========================================
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Delete existing Production container
      run: |
        echo "üóëÔ∏è Deleting old production container..."
        az container delete \
          --name ${{ secrets.PROD_CONTAINER_NAME }} \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --yes || echo "Container doesn't exist, skipping delete"
    
    - name: Deploy to Production with Environment Variables
      run: |
        echo "üöÄ Deploying to Production..."
        az container create \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --name ${{ secrets.PROD_CONTAINER_NAME }} \
          --image ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --registry-login-server ${{ secrets.REGISTRY_LOGIN_SERVER }} \
          --registry-username ${{ secrets.REGISTRY_USERNAME }} \
          --registry-password ${{ secrets.REGISTRY_PASSWORD }} \
          --os-type Linux \
          --environment-variables \
            'AzureStorage__ConnectionString'='${{ secrets.AZURE_STORAGE_CONNECTION_STRING_PROD }}' \
            'AzureStorage__ContainerName'='${{ secrets.AZURE_STORAGE_CONTAINER_NAME_PROD }}' \
            'ASPNETCORE_ENVIRONMENT'='Production' \
            'Logging__LogLevel__Default'='Warning' \
          --dns-name-label learnings-api-prod \
          --ports 8080 \
          --cpu 2 \
          --memory 2 \
          --restart-policy Always
        echo "‚úÖ Production deployment initiated!"
    
    - name: Wait for container to be ready
      run: |
        echo "‚è≥ Waiting for container to start..."
        sleep 30
    
    - name: Check container logs
      run: |
        echo "üìã Checking container logs..."
        az container logs \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --name ${{ secrets.PROD_CONTAINER_NAME }} \
          --tail 50
    
    - name: Verify deployment health
      run: |
        echo "üè• Checking deployment health..."
        FQDN=$(az container show \
          --name ${{ secrets.PROD_CONTAINER_NAME }} \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --query 'ipAddress.fqdn' -o tsv)
        
        echo "Testing URL: http://${FQDN}:8080/swagger"
        
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${FQDN}:8080/swagger || echo "000")
        
        if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "302" ]; then
          echo "‚úÖ Production is healthy! (HTTP $HTTP_CODE)"
          echo "üåê Access at: http://${FQDN}:8080/swagger"
        else
          echo "‚ùå ERROR: Production returned HTTP $HTTP_CODE"
          echo "üìã Recent logs:"
          az container logs \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name ${{ secrets.PROD_CONTAINER_NAME }} \
            --tail 30
          exit 1
        fi
    
    - name: Send Success Email
      if: success()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "‚úÖ Production Deployment Successful - ${{ github.repository }}"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: DevOps Notifications <${{ secrets.EMAIL_USERNAME }}>
        body: |
          Production deployment completed successfully!
          
          üì¶ Repository: ${{ github.repository }}
          üîñ Commit: ${{ github.sha }}
          üë§ Triggered by: ${{ github.actor }}
          üîó Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          üåê URL: http://learnings-api-prod.centralus.azurecontainer.io:8080/swagger
    
    - name: Send Failure Email
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "‚ùå Production Deployment Failed - ${{ github.repository }}"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: DevOps Notifications <${{ secrets.EMAIL_USERNAME }}>
        body: |
          Production deployment FAILED!
          
          üì¶ Repository: ${{ github.repository }}
          üîñ Commit: ${{ github.sha }}
          üë§ Triggered by: ${{ github.actor }}
          üîó Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          Please check the logs for details.
    
    - name: Azure Logout
      run: az logout
      if: always()