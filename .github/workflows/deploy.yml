name: Deploy to Azure Container Instances

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}
  IMAGE_NAME: learnings-api

jobs:
  # ==========================================
  # JOB 1: Build and Push Docker Image
  # ==========================================
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # ==========================================
  # JOB 2: Deploy to Staging (Automatic)
  # ==========================================
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Show az version (debug)
        run: az --version

      - name: Deploy to Staging (delete+create if needed)
        env:
          RG: ${{ secrets.RESOURCE_GROUP }}
          NAME: ${{ secrets.STAGING_CONTAINER_NAME }}
          IMAGE: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          REGISTRY: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          REG_USER: ${{ secrets.REGISTRY_USERNAME }}
          REG_PASS: ${{ secrets.REGISTRY_PASSWORD }}
          STORAGE_CONN: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING_STAGING }}
          STORAGE_CONTAINER: ${{ secrets.AZURE_STORAGE_CONTAINER_NAME_STAGING }}
          DNS_LABEL: learnings-api-staging-${{ github.run_number }}
        run: |
          set -euo pipefail
          echo "üöÄ Deploying to Staging..."
          exists() {
            az container show --resource-group "$RG" --name "$NAME" --query "name" -o tsv 2>/dev/null || echo ""
          }

          current_name="$(exists)"
          if [ -n "$current_name" ]; then
            echo "Container group '$NAME' exists. Inspecting restartPolicy..."
            restartPolicy=$(az container show --resource-group "$RG" --name "$NAME" --query "restartPolicy" -o tsv 2>/dev/null || az container show --resource-group "$RG" --name "$NAME" --query "properties.restartPolicy" -o tsv || echo "")
            echo "Current restartPolicy: ${restartPolicy:-<unknown>}"

            if [ "${restartPolicy:-}" != "Always" ]; then
              echo "Restart policy differs (needs 'Always'). Deleting existing container group..."
              az container delete --resource-group "$RG" --name "$NAME" --yes

              echo "Waiting for container group to be deleted..."
              for i in {1..60}; do
                sleep 2
                if [ -z "$(exists)" ]; then
                  echo "Container group deleted."
                  break
                fi
                echo "Still deleting... ($i)"
              done

              if [ -n "$(exists)" ]; then
                echo "Timed out waiting for deletion; aborting." >&2
                exit 1
              fi
            else
              echo "Restart policy already 'Always' ‚Äî will attempt create (ACI will update if allowed)."
            fi
          else
            echo "Container group '$NAME' does not exist ‚Äî will create it."
          fi

          az container create \
            --resource-group "$RG" \
            --name "$NAME" \
            --image "$IMAGE" \
            --registry-login-server "$REGISTRY" \
            --registry-username "$REG_USER" \
            --registry-password "$REG_PASS" \
            --os-type Linux \
            --environment-variables AzureStorage__ConnectionString="$STORAGE_CONN" AzureStorage__ContainerName="$STORAGE_CONTAINER" \
            --dns-name-label "$DNS_LABEL" \
            --ports 80 \
            --cpu 1 \
            --memory 1.5 \
            --restart-policy Always

          echo "‚úÖ Staging deployment complete!"

      - name: Azure Logout
        run: az logout
        if: always()

  # ==========================================
  # JOB 3: Deploy to Production (Manual Approval Possible)
  # ==========================================
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Show az version (debug)
        run: az --version

      - name: Deploy to Production (delete+create if needed)
        env:
          RG: ${{ secrets.RESOURCE_GROUP }}
          NAME: ${{ secrets.PROD_CONTAINER_NAME }}
          IMAGE: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          REGISTRY: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          REG_USER: ${{ secrets.REGISTRY_USERNAME }}
          REG_PASS: ${{ secrets.REGISTRY_PASSWORD }}
          STORAGE_CONN: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING_PROD }}
          STORAGE_CONTAINER: ${{ secrets.AZURE_STORAGE_CONTAINER_NAME_PROD }}
          DNS_LABEL: learnings-api-prod-${{ github.run_number }}
        run: |
          set -euo pipefail
          echo "üöÄ Deploying to Production..."
          exists() {
            az container show --resource-group "$RG" --name "$NAME" --query "name" -o tsv 2>/dev/null || echo ""
          }

          current_name="$(exists)"
          if [ -n "$current_name" ]; then
            echo "Container group '$NAME' exists. Inspecting restartPolicy..."
            restartPolicy=$(az container show --resource-group "$RG" --name "$NAME" --query "restartPolicy" -o tsv 2>/dev/null || az container show --resource-group "$RG" --name "$NAME" --query "properties.restartPolicy" -o tsv || echo "")
            echo "Current restartPolicy: ${restartPolicy:-<unknown>}"

            if [ "${restartPolicy:-}" != "Always" ]; then
              echo "Restart policy differs (needs 'Always'). Deleting existing container group..."
              az container delete --resource-group "$RG" --name "$NAME" --yes

              echo "Waiting for container group to be deleted..."
              for i in {1..60}; do
                sleep 2
                if [ -z "$(exists)" ]; then
                  echo "Container group deleted."
                  break
                fi
                echo "Still deleting... ($i)"
              done

              if [ -n "$(exists)" ]; then
                echo "Timed out waiting for deletion; aborting." >&2
                exit 1
              fi
            else
              echo "Restart policy already 'Always' ‚Äî will attempt create (ACI will update if allowed)."
            fi
          else
            echo "Container group '$NAME' does not exist ‚Äî will create it."
          fi

          az container create \
            --resource-group "$RG" \
            --name "$NAME" \
            --image "$IMAGE" \
            --registry-login-server "$REGISTRY" \
            --registry-username "$REG_USER" \
            --registry-password "$REG_PASS" \
            --os-type Linux \
            --environment-variables AzureStorage__ConnectionString="$STORAGE_CONN" AzureStorage__ContainerName="$STORAGE_CONTAINER" \
            --dns-name-label "$DNS_LABEL" \
            --ports 80 \
            --cpu 2 \
            --memory 2 \
            --restart-policy Always

          echo "‚úÖ Production deployment complete!"

      - name: Send Success Email
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚úÖ Production Deployment Successful - ${{ github.repository }}"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: DevOps Notifications <${{ secrets.EMAIL_USERNAME }}>
          body: |
            Production deployment completed successfully!

            üì¶ Repository: ${{ github.repository }}
            üîñ Commit: ${{ github.sha }}
            üë§ Triggered by: ${{ github.actor }}
            üîó Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Send Failure Email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚ùå Production Deployment Failed - ${{ github.repository }}"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: DevOps Notifications <${{ secrets.EMAIL_USERNAME }}>
          body: |
            Production deployment FAILED!

            üì¶ Repository: ${{ github.repository }}
            üîñ Commit: ${{ github.sha }}
            üë§ Triggered by: ${{ github.actor }}
            üîó Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Azure Logout
        run: az logout
        if: always()
