name: Deploy to Azure Container Instances

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}
  IMAGE_NAME: learnings-api

jobs:
  # ==========================================
  # JOB 1: Build and Push Docker Image
  # ==========================================
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # ==========================================
  # JOB 2: Deploy to Staging (Automatic)
  # ==========================================
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Show az version (debug)
        run: az --version

      - name: Deploy to Staging (create / update)
        run: |
          echo "üöÄ Deploying to Staging..."
          az container create \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name ${{ secrets.STAGING_CONTAINER_NAME }} \
            --image ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --registry-login-server ${{ secrets.REGISTRY_LOGIN_SERVER }} \
            --registry-username ${{ secrets.REGISTRY_USERNAME }} \
            --registry-password ${{ secrets.REGISTRY_PASSWORD }} \
            --os-type Linux \
            --environment-variables AzureStorage__ConnectionString="${{ secrets.AZURE_STORAGE_CONNECTION_STRING_STAGING }}" AzureStorage__ContainerName="${{ secrets.AZURE_STORAGE_CONTAINER_NAME_STAGING }}" \
            --dns-name-label learnings-api-staging-${{ github.run_number }} \
            --ports 80 \
            --cpu 1 \
            --memory 1.5 \
            --restart-policy Always
          echo "‚úÖ Staging deployment complete!"

      # Optional: if create fails because some immutable property changed, you can delete first and recreate:
      # - name: Delete existing container group (uncomment to use)
      #   run: az container delete --name ${{ secrets.STAGING_CONTAINER_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }} --yes

      - name: Azure Logout
        run: az logout
        if: always()

  # ==========================================
  # JOB 3: Deploy to Production (Manual Approval Required)
  # ==========================================
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Show az version (debug)
        run: az --version

      - name: Deploy to Production (create / update)
        run: |
          echo "üöÄ Deploying to Production..."
          az container create \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name ${{ secrets.PROD_CONTAINER_NAME }} \
            --image ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --registry-login-server ${{ secrets.REGISTRY_LOGIN_SERVER }} \
            --registry-username ${{ secrets.REGISTRY_USERNAME }} \
            --registry-password ${{ secrets.REGISTRY_PASSWORD }} \
            --os-type Linux \
            --environment-variables AzureStorage__ConnectionString="${{ secrets.AZURE_STORAGE_CONNECTION_STRING_PROD }}" AzureStorage__ContainerName="${{ secrets.AZURE_STORAGE_CONTAINER_NAME_PROD }}" \
            --dns-name-label learnings-api-prod-${{ github.run_number }} \
            --ports 80 \
            --cpu 2 \
            --memory 2 \
            --restart-policy Always
          echo "‚úÖ Production deployment complete!"

      - name: Send Success Email
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚úÖ Production Deployment Successful - ${{ github.repository }}"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: DevOps Notifications <${{ secrets.EMAIL_USERNAME }}>
          body: |
            Production deployment completed successfully!

            üì¶ Repository: ${{ github.repository }}
            üîñ Commit: ${{ github.sha }}
            üë§ Triggered by: ${{ github.actor }}
            üîó Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Send Failure Email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚ùå Production Deployment Failed - ${{ github.repository }}"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: DevOps Notifications <${{ secrets.EMAIL_USERNAME }}>
          body: |
            Production deployment FAILED!

            üì¶ Repository: ${{ github.repository }}
            üîñ Commit: ${{ github.sha }}
            üë§ Triggered by: ${{ github.actor }}
            üîó Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Azure Logout
        run: az logout
        if: always()
